Python Dictionaries
Dictionaries are ordered collection of data items. Dictionaries became ordered from Python 3.7 onwads.
They store multiple items in a single variable. Dictionary items are key-value pairs that are separated by commas
and enclosed within curly brackets {}.

Example:
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info)

Output:
{'name': 'Karan', 'age': 19, 'eligible': True}

Accessing Dictionary items:
ðŸ“Œ Accessing single values:
Values in a dictionary can be accessed using keys. 
We can access dictionary values by mentioning keys either in square brackets or by using get method.

Example:
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info['name'])
print(info.get('eligible'))


ðŸŽ¯COMMIT TO MEMORY:
ðŸ‘‰we will get same output for line 20 and 21 but there exist a differnce too and that is..if you are printing line 20, 
if that key doesn't exist it will throw error while in case of get method, you will get none in case key doesn't existðŸ‘ˆ


Output:
Karan
True

ðŸ“Œ Accessing multiple values:
We can print all the values in the dictionary using values() method.

Example:
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.values())

Output:
dict_values(['Karan', 19, True])

ðŸ“Œ Accessing keys:
We can print all the keys in the dictionary using keys() method.

Example:
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.keys())

Output:
dict_keys(['name', 'age', 'eligible'])

ðŸ“Œ Accessing key-value pairs:
We can print all the key-value pairs in the dictionary using items() method.

Example:
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.items())

Output:
dict_items([('name', 'Karan'), ('age', 19), ('eligible', True)])

